name: Java CI/CD Pipeline

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Build with Maven
        run: mvn clean install

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SonarQube analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@v1

      - name: Configure JFrog CLI
        run: |
          jfrog config add jfrog-server \
            --url="http://13.126.4.238:8081/artifactory/" \
            --access-token="cmVmdGtuOjAxOjE3ODc1MDgwMzU6NGpSQU8wOFVrRklUb1BjbTZKaWxTS0lRWW9v" \
            --interactive=false

      - name: Deploy artifact to Artifactory
        run: |
          jfrog rt upload "target/*.war" "local-snapshot-repo/com/example/simple-maven-project/" --server-id=jfrog-server

      - name: Deploy WAR to Tomcat
        run: |
          curl --user "${{ secrets.TOMCAT_USERNAME }}:${{ secrets.TOMCAT_PASSWORD }}" \
               --upload-file target/*.war \
               "http://${{ secrets.TOMCAT_HOST }}:8080/manager/text/deploy?path=/ecommerce&update=true"
        env:
          TOMCAT_MANAGER_USERNAME: ${{ secrets.TOMCAT_USERNAME }}
          TOMCAT_MANAGER_PASSWORD: ${{ secrets.TOMCAT_PASSWORD }}
    
